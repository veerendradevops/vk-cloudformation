AWSTemplateFormatVersion: "2010-09-09"
Description: Template for Visualizing GuardDuty Findings

Resources:

  GuardDutyBucket:
    Type: AWS::S3::Bucket
    DependsOn: 
      - BucketPermission
      - LambdaSortFindings
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
        - 
          Function: !GetAtt LambdaSortFindings.Arn
          Event: 's3:ObjectCreated:*'
          Filter:
            S3Key:
              Rules:
                -
                  Name: prefix
                  Value: raw/firehose/
      LifecycleConfiguration:
        Rules:
        - Id: DeleteGlueTempFiles
          Prefix: '/temp_dir/'
          Status: Enabled
          ExpirationInDays: '5'
  
  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaSortFindings
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"

  GuardDutyCloudWatchEvent:
    DependsOn:
      - GuardDutyFirehose
    Type: "AWS::Events::Rule"
    Properties: 
      Description: String
      State: "ENABLED"
      EventPattern: 
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "GuardDutyFirehose"
              - "Arn"
          Id: "FirehoseStream"
          RoleArn: !GetAtt EventsDeliveryRole.Arn
  
  EventsDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -  
          PolicyName: cloudwatch_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource:
                  - !GetAtt GuardDutyFirehose.Arn
      
  GuardDutyFirehose:
    DependsOn:
      - FirehoseDeliveryPolicy
      - GuardDutyBucket
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref GuardDutyBucket
        BufferingHints:
          IntervalInSeconds: '900'
          SizeInMBs: '128'
        CompressionFormat: UNCOMPRESSED
        Prefix: raw/firehose/
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn

  FirehoseDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  
  FirehoseDeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref GuardDutyBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref GuardDutyBucket
                  - '*'
      Roles:
        - !Ref FirehoseDeliveryRole
  
  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        -
          PolicyName: "AWSGlueServiceRole-GuardDuty"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref GuardDutyBucket
                  - /*
 
  RawGuardDutyDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: "Database for storing the raw information of GuardDuty Logs"
  
  RawGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt GlueCrawlerRole.Arn
      DatabaseName: !Ref RawGuardDutyDatabase
      Targets:
        S3Targets:
          - Path: !Join 
              - ''
              - - 's3://'
                - !Ref GuardDutyBucket
                - /raw/by_finding_type/
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "DEPRECATE_IN_DATABASE"
      Schedule:
        ScheduleExpression: "cron(0 0 * * ? *)"
  
  LambdaSortFindings:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3, csv, os, json
          s3_resource = boto3.resource('s3')
          s3_client = boto3.client('s3')

          def lambda_handler(event, context):
              print(event)
              record_count = 0
              
              for record in event['Records']:
              
                  bucket = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']
                  partition = '/'.join(object_key.split('/')[2:-1])              
                  
                  response = s3_client.get_object(Bucket=bucket, Key=object_key)
                  findings = '['+ response['Body'].read().decode('utf-8').replace('}{','},\n{') +']'
                  
                  findings_list = json.loads(findings)
                  record_count += len(findings_list)
                  output = {}
                  
                  for item in findings_list:
                      if item['detail']['type'] not in output:
                          output[item['detail']['type']] = [item]
                      else:
                          output[item['detail']['type']].append(item)
                  
                  for finding_type in output:
                      print(object_key.split('/')[-1])
                      s3_path = 'raw/by_finding_type/' + '_'.join(finding_type.split('/')) +  '/' + partition  + '/'  + object_key.split('/')[-1] + '.json'
                      body = ''
                      for version in output[finding_type]:
                          body += json.dumps(version) + '\n'
                      s3_resource.Bucket(bucket).put_object(Key=s3_path, Body=body)
              
              return 'Processed: ' + str(record_count) + ' logs'

      Handler: index.lambda_handler
      Runtime: python3.6
      Description: 'Function sorts findings by type and places them into appropriate bucket'
      MemorySize: 128
      Timeout: 300
      Role:
        Fn::GetAtt:
        - LambdaSortRole
        - Arn

  LambdaSortRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
     
Outputs:
  S3BucketName:
    Description: Name of the bucket used for storing logs
    Value: !Ref GuardDutyBucket
